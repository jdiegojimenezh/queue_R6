cat("\n----- PROB. CONJUNTA  Pr{N=(0,1)} ---\n")
cat("R6      :", open_r6$Pn(c(0,1)), "\n")
cat("queueing:", prod(Pn(open_q))[2],    "\n")   # segundo nodo =1
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
############################################################
## CARGA DE PAQUETES
############################################################
library(R6arqas)     # tu paquete R6
library(queueing)    # CRAN
############################################################
## DATOS COMUNES
############################################################
lambda_vec <- c(20, 30)                   # llegadas externas
mu_vec     <- c(100, 25)                  # tasas de servicio
s_vec      <- c(1, 2)                     # servidores en cada nodo
P <- matrix(c(0.20, 0.10,                 # de nodo 1 a 1 y 2
0.25, 0.00),                # de nodo 2 a 1 y salida
nrow = 2, byrow = TRUE)
############################################################
## 1) MODELO EN R6arqas  (OPEN_JACKSON)
############################################################
open_r6 <- OPEN_JACKSON(lambda = lambda_vec,
mu     = mu_vec,
s      = s_vec,
p      = P)
############################################################
## 2) MODELO EN queueing  (i_OJN  → QueueingModel)
############################################################
# nodos individuales (idénticos parámetros)
n1 <- NewInput.MM1(lambda = lambda_vec[1], mu = mu_vec[1])
n2 <- NewInput.MMC(lambda = lambda_vec[2], mu = mu_vec[2], c = s_vec[2])
# entrada de red (NOTA: nodos van en “...”)
open_in  <- NewInput.OJN(prob = P, n1, n2)
open_q   <- QueueingModel(open_in)
############################################################
## COMPARACIÓN DE RESULTADOS
############################################################
cat("\n----- THROUGHPUT por nodo (λ̄) -----\n")
print(cbind(R6 = open_r6$lambda_vec,
queueing = Throughputk(open_q)))
print(cbind(R6 = open_r6$barlambda_vec,
queueing = Throughputk(open_q)))
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
############################################################
## CARGA DE PAQUETES
############################################################
library(R6arqas)     # tu paquete R6
library(queueing)    # CRAN
############################################################
## DATOS COMUNES
############################################################
lambda_vec <- c(20, 30)                   # llegadas externas
mu_vec     <- c(100, 25)                  # tasas de servicio
s_vec      <- c(1, 2)                     # servidores en cada nodo
P <- matrix(c(0.20, 0.10,                 # de nodo 1 a 1 y 2
0.25, 0.00),                # de nodo 2 a 1 y salida
nrow = 2, byrow = TRUE)
############################################################
## 1) MODELO EN R6arqas  (OPEN_JACKSON)
############################################################
open_r6 <- OPEN_JACKSON(lambda = lambda_vec,
mu     = mu_vec,
s      = s_vec,
p      = P)
############################################################
## 2) MODELO EN queueing  (i_OJN  → QueueingModel)
############################################################
# nodos individuales (idénticos parámetros)
n1 <- NewInput.MM1(lambda = lambda_vec[1], mu = mu_vec[1])
n2 <- NewInput.MMC(lambda = lambda_vec[2], mu = mu_vec[2], c = s_vec[2])
# entrada de red (NOTA: nodos van en “...”)
open_in  <- NewInput.OJN(prob = P, n1, n2)
open_q   <- QueueingModel(open_in)
############################################################
## COMPARACIÓN DE RESULTADOS
############################################################
cat("\n----- THROUGHPUT por nodo (λ̄) -----\n")
print(cbind(R6 = open_r6$barlambda_vec,
queueing = Throughputk(open_q)))
cat("\n----- UTILIZACIÓN (ρ) --------------\n")
print(cbind(R6 = open_r6$node(1)$out$rho,
queueing = ROk(open_q)[1]))
print(cbind(R6 = open_r6$node(2)$out$rho,
queueing = ROk(open_q)[2]))
cat("\n----- L  (nº medio en nodo) --------\n")
print(cbind(R6 = open_r6$out$L,
queueing = Lk(open_q)))
cat("\n----- Lq (nº medio en cola) --------\n")
print(cbind(R6 = open_r6$out$Lq,
queueing = Wk(open_q) * Throughputk(open_q)))
# 1) throughput interno que queueing ya calculó
blambda_q <- Throughputk(open_q)
# 2) nodos originales (clase i_MM1 / i_MMC) allí guardados
raw_nd <- open_q$Inputs$nodes
# 3) volvemos a resolver cada nodo con ese blambda
Lq_q <- mapply(function(nd, lam){
if (inherits(nd, "i_MM1")) {
out <- QueueingModel(NewInput.MM1(lambda = lam, mu = nd$mu))
} else {                    # nodo M/M/c
out <- QueueingModel(NewInput.MMC(lambda = lam,
mu     = nd$mu,
c      = nd$c))
}
Lq(out)                     # <- número medio EN COLA
}, nd = raw_nd, lam = blambda_q)
print(cbind(R6 = open_r6$out$Lq,
queueing = Lq_q))
cat("\n----- Wq CDF  F_{Wq}(t)  t = 0,1,2 --\n")
print(rbind(t0 = c(R6 = open_r6$node(1)$FWq(0), queueing = open_q$FWq(0)),
t1 = c(R6 = open_r6$node(1)$FWq(1), queueing = open_q$FWq(1)),
t2 = c(R6 = open_r6$node(1)$FWq(2), queueing = open_q$FWq(2))))
cat("\n----- PROB. CONJUNTA  Pr{N=(0,1)} ---\n")
cat("R6      :", open_r6$Pn(c(0,1)), "\n")
cat("queueing:", prod(Pn(open_q))[2],    "\n")   # segundo nodo =1
node1_out_q <- QueueingModel(
NewInput.MM1(lambda = blambda_q[1],
mu     = raw_nd[[1]]$mu) )
## Ahora sí hay FWq():
cdf_Wq_q <- node1_out_q$FWq             #  <- función CDF de Wq
cdf_W_q  <- node1_out_q$FW              #  <- función CDF de W
## Comparamos con tu implementación R6
cdf_Wq_r6 <- open_r6$node(1)$FWq
cdf_W_r6  <- open_r6$node(1)$FW
rbind(
t0 = c(R6 = cdf_Wq_r6(0), queueing = cdf_Wq_q(0)),
t1 = c(R6 = cdf_Wq_r6(1), queueing = cdf_Wq_q(1)),
t2 = c(R6 = cdf_Wq_r6(2), queueing = cdf_Wq_q(2))
)
cat("\n----- PROB. CONJUNTA  Pr{N=(0,1)} ---\n")
cat("R6      :", open_r6$Pn(c(0,1)), "\n")
cat("queueing:", prod(Pn(open_q))[2],    "\n")
mu2  <- c(100, 25)
s2   <- c(1,   2)
## throughputs que calculó queueing --
blambda <- Throughputk(open_q)
## resolvemos cada nodo ---------------
n1_q <- QueueingModel(NewInput.MM1(lambda = blambda[1], mu = mu2[1]))
n2_q <- QueueingModel(NewInput.MMC(lambda = blambda[2], mu = mu2[2], c = s2[2]))
## marginales -------------------------
P1 <- n1_q$Pn          # vector  P{N1 = n},  n = 0,1,…
P2 <- n2_q$Pn          # vector  P{N2 = n}
## prob. conjunta para (0,1) ----------
pjoint_q <- P1[1] * P2[2]   # 0-based → índices 1 y 2
cbind(R6       = pjoint_r6,
queueing = pjoint_q)
pjoint_r6 <- open_r6$Pn(c(0, 1))
cbind(R6       = pjoint_r6,
queueing = pjoint_q)
P1
## resolvemos cada nodo ---------------
n1_q <- QueueingModel(NewInput.MM1(lambda = blambda[1], mu = mu2[1], n=1))
n2_q <- QueueingModel(NewInput.MMC(lambda = blambda[2], mu = mu2[2], c = s2[2], n=1))
## marginales -------------------------
P1 <- n1_q$Pn          # vector  P{N1 = n},  n = 0,1,…
P2 <- n2_q$Pn          # vector  P{N2 = n}
## prob. conjunta para (0,1) ----------
pjoint_q <- P1[1] * P2[2]   # 0-based → índices 1 y 2
pjoint_r6 <- open_r6$Pn(c(0, 1))
cbind(R6       = pjoint_r6,
queueing = pjoint_q)
# parameters identical to CLOSED_JACKSON example
c_mu <- c(5, 5, 10, 15)
c_s  <- c(2, 2, 1, 1)
P_cl <- matrix(c(0.25, 0.15, 0.20, 0.40,
0.15, 0.35, 0.20, 0.30,
0.50, 0.25, 0.15, 0.10,
0.40, 0.30, 0.25, 0.05), 4, byrow = TRUE)
closed_in  <- NewInput.CJN(n = 3, mu = c_mu, prob = P_cl, nserver = c_s)
closed_out <- QueueingModel(closed_in)
print(closed_out$L)       # expected number at each node
print(sum(closed_out$L))  # total customers (should be 3)
## 1)  datos -----------------------------------------------------------
mu  <- c( 5,  5, 10, 15)      # tasas de servicio
s   <- c( 2,  2,  1,  1)      # servidores
P   <- matrix(c(0.25, 0.15, 0.20, 0.40,
0.15, 0.35, 0.20, 0.30,
0.50, 0.25, 0.15, 0.10,
0.40, 0.30, 0.25, 0.05), 4, byrow = TRUE)
N   <- 3                      # población total
## 2)  nodos individuales (cualquier λ>0, p. ej. λ = 1) ----------------
lambda0 <- rep(1, 4)          # la CJN sólo necesita ratios; λ puede ser 1
nodes <- list(
NewInput.MMC (lambda0[1], mu[1], c = s[1]),
NewInput.MMC (lambda0[2], mu[2], c = s[2]),
NewInput.MM1 (lambda0[3], mu[3]),          # s = 1  →  MM1
NewInput.MM1 (lambda0[4], mu[4])
)
## 3)  entrada de la red cerrada ---------------------------------------
closed_in <- NewInput.CJN(prob  = P,
nodes = nodes,
n     = N)
## 4)  resolver modelo --------------------------------------------------
closed_q <- QueueingModel(closed_in)
## 3)  entrada de la red cerrada ---------------------------------------
closed_in <- NewInput.CJN(prob  = P,
n     = N,
n1,n2,n3,n4)
n1 <- NewInput.MMC(lambda = 1, mu = mu[1], c = s[1])
n2 <- NewInput.MMC(lambda = 1, mu = mu[2], c = s[2])
n3 <- NewInput.MM1(lambda = 1, mu = mu[3])      # s = 1
n4 <- NewInput.MM1(lambda = 1, mu = mu[4])
## 3)  entrada de la red cerrada ---------------------------------------
closed_in <- NewInput.CJN(prob  = P,
n     = N,
n1,n2,n3,n4)
## 4)  resolver modelo --------------------------------------------------
closed_q <- QueueingModel(closed_in)
## 3)  entrada de la red cerrada ---------------------------------------
closed_in <- NewInput.CJN(prob  = P,
n     = N,
node1 = n1,
node2 = n2,
node3 = n3,
node4 = n4)
## 4)  resolver modelo --------------------------------------------------
closed_q <- QueueingModel(closed_in)
## 5)  resultados -------------------------------------------------------
print(closed_q$Lk)           # L por nodo
print(sum(closed_q$Lk))      # total  (≈ N)
closed_r6 <- CLOSED_JACKSON(mu = mu, s = s, p = P, n = N)
## Lq por nodo (queueing = Lq = Wq * Throughputk)
cbind(R6        = closed_r6$out$Lq,
queueing  = closed_q$Wk * closed_q$Throughputk)
## Probabilidad conjunta p{N = (0,1,1,1)}   (ejemplo)
state <- c(0,1,1,1)
pj_r6 <- closed_r6$Pn(state)
## con queueing: producto de marginales -------------------------------
Pk <- lapply(seq_along(nodes), function(i) closed_q$Pn[[i]])
pj_q <- prod(mapply(function(pk, n) pk[n+1], Pk, state))  # +1 porque índices en R
cbind(R6 = pj_r6, queueing = pj_q)
## Lq por nodo (queueing = Lq = Wq * Throughputk)
cbind(R6        = closed_r6$out$Lq,
queueing  = Lk(closed_q) - Throughputk(closed_q) / mu)
Lk(closed_q)
Throughputk(closed_q)
Lk(closed_q) - Throughputk(closed_q)
Lk(closed_q) - Throughputk(closed_q) / mu
(Lk(closed_q) - Throughputk(closed_q) / mu)[1,]
## Lq por nodo (queueing = Lq = Wq * Throughputk)
cbind(R6        = closed_r6$out$Lq,
queueing  = (Lk(closed_q) - Throughputk(closed_q) / mu)[1,])
queueing_Lq <- closed_q$Nq     # longitud media de cola en cada nodo
cbind(R6       = closed_r6$out$Lq,
queueing = queueing_Lq)
queueing_Lq
closed_q
Nqk(closed_q)
install.packages("queueing")
library(queueing)
Nqk(closed_q)
## Lq por nodo (queueing = Lq = Wq * Throughputk)
cbind(R6        = closed_r6$out$Lq,
queueing  = (Lk(closed_q) - Throughputk(closed_q) / mu)[1,])
## 5)  resultados -------------------------------------------------------
print(closed_q$Lk)           # L por nodo
print(sum(closed_q$Lk))      # total  (≈ N)
closed_r6 <- CLOSED_JACKSON(mu = mu, s = s, p = P, n = N)
library(R6arqas)
closed_r6 <- CLOSED_JACKSON(mu = mu, s = s, p = P, n = N)
## Lq por nodo (queueing = Lq = Wq * Throughputk)
cbind(R6        = closed_r6$out$Lq,
queueing  = (Lk(closed_q) - Throughputk(closed_q) / mu)[1,])
## Probabilidad conjunta p{N = (0,1,1,1)}   (ejemplo)
state <- c(0,1,1,1)
pj_r6 <- closed_r6$Pn(state)
## con queueing: producto de marginales -------------------------------
Pk <- lapply(seq_along(nodes), function(i) closed_q$Pn[[i]])
pj_q <- prod(mapply(function(pk, n) pk[n+1], Pk, state))  # +1 porque índices en R
cbind(R6 = pj_r6, queueing = pj_q)
if (!requireNamespace("R6arqas", quietly = TRUE)) {
stop("Package 'R6arqas' must be installed or loaded with devtools::load_all().")
}
library(R6arqas)
# Global parameters ----------------------------------------------------
lambda <- 4   # arrival rate (>0)
mu     <- 6   # service rate (>0)
cat("\n--- M/M/1 -----------------------------------------------------------\n")
mm1 <- MM1$new(lambda, mu)
print(mm1)
cat("Pn      :", mm1$Pn(0:5), "\n")
# -------------------------- 1. Simple queues ------------------------- #
cat("--- M/M/1 ---------------------------------------------------------\n")
mm1_in  <- NewInput.MM1(lambda = 4, mu = 6, n=2)
mm1_out <- QueueingModel(mm1_in)
print(mm1_out$L)
print(mm1_out$Wq)
Pn(mm1_out)
mm1_out$FWq(0:2)
Pn(mm1_out)
mm1_out$FWq(0:2)
Pn(mm1_out)
?Pn()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
devtools::document()
devtools::build_manual(path = "C:/Users/USUARIO/Desktop/u/TIC/R6arqas/R6arqas/docs")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
tools::texi2pdf("--version")
devtools::build_manual(path = "C:/Users/USUARIO/Desktop/u/TIC/R6arqas/R6arqas/docs", quiet = FALSE)
devtools::build(
pkg   = ".",                 # carpeta del paquete
path  = "C:/Users/USUARIO/Desktop/u/TIC/R6arqas/R6arqas/docs",
manual = TRUE,               # <-- genera la PDF
quiet  = FALSE               # <-- aquí *sí* existe `quiet`
)
unlink(c("man", "NAMESPACE"), recursive = TRUE)
tools::build_manual(
pkg = ".",                          # carpeta del paquete
path = tempdir(),                   # dónde guardar la PDF y el .log
tex_options = "--interaction=nonstopmode"
)
devtools::build_manual(
pkg = ".",                          # carpeta del paquete
path = tempdir(),                   # dónde guardar la PDF y el .log
tex_options = "--interaction=nonstopmode"
)
rlang::last_trace()
source("~/.active-rstudio-document", echo = TRUE)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
devtools::document()
devtools::build_manual(path = "C:/Users/USUARIO/Desktop/u/TIC/R6arqas/R6arqas/docs")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
log_file <- tools::build_manual(pkg = ".", path = tempdir(),
tex_options = "--interaction=nonstopmode")
system2("R", c("CMD", "Rd2pdf", ".", "--output=manual.pdf", "--force"))
files <- list.files(c("R", "man"), pattern = "\\.[Rr]$|\\.Rd$", full.names = TRUE, recursive = TRUE)
found <- vapply(files, function(f) grepl("\u2265", readLines(f, warn = FALSE), useBytes = TRUE), logical(1))
files[found]
found <- vapply(files, function(f) grepl("\u2265", readLines(f, warn = FALSE), useBytes = TRUE), logical(1))
files_with_ge <- files[
sapply(files, function(f) any(grepl("\u2265", readLines(f, warn = FALSE), useBytes = TRUE)))
]
print(files_with_ge)
roxygen2::roxygenise()
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
system2("R", c("CMD", "Rd2pdf", ".", "--output=manual.pdf", "--force"))
files <- list.files(c("R", "man"), pattern = "\\.[Rr]$|\\.Rd$", full.names = TRUE, recursive = TRUE)
files_with_ge <- files[
sapply(files, function(f) any(grepl("\u2265", readLines(f, warn = FALSE), useBytes = TRUE)))
]
print(files_with_ge)
unlink(c("man", "NAMESPACE"), recursive = TRUE)
roxygen2::roxygenise()
detach("package:R6arqas", unload = TRUE)  # si estaba cargado
devtools::install()
devtools::check()
devtools::document()
devtools::build_manual(path = "C:/Users/USUARIO/Desktop/u/TIC/R6arqas/R6arqas/docs")
library(devtools)
install_github("jdiegojimenezh/colas")
git remote add origin https://github.com/username/reponame
install_github("jdiegojimenezh/colas")
